<?php
/**
 * @file
 * Module functions to display library hours.
 *
 * @author Parth Shah <parth.shah@ucdenver.edu>
 * 
 */
 
/**
 * Implements hook_help()
 * Displays help and modules information.
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */

function libhours_help($path, $arg)  {
  switch($path)  {
    case "admin/help#libhours":
      return '<p>' . t("Displays the hours for the libraries.") . '<p>';
        break;
  }
}

/**
 * Implements hook_init()
 */
function libhours_init()  {
  $basepath = drupal_get_path('module','libhours');
  drupal_add_css($basepath . '/libhours.css');
  drupal_add_js($basepath . '/libhours.js');
}


/**
 * Implements hook_permission()
 */
function libhours_permission()  {
  return array(
    'access content' => array(
      'title' => t('Access Content'),
      'description' => t('Allow users to access content'),
    ),
    'administer library hours' => array(
      'title' => t('administer library hours'),
      'description' => t('Allow user to access Lib hours'),
    ),
  );
}

/**
 * Implements hook_theme()
 */
/*
function libhours_theme()  {
  return array(
    'time' => array(
      'variables' => array('element' => null)
    ),
    'hours_display' => array(
      'variables' => array('lid' => 0, 'pid' => 0),
        'template' => 'libhours-display'
      )
  );
}
*/
function libhours_menu()  {
  $items = array();
	
  /* PAGE PATHS */
	
  /* This menu will be deprecated */

  $items['libraryhours'] = array(
    'title' => t('Library Hours'),
    'page callback' => 'libhours_redirect',
    'access arguments' => array('access content'),
    'file' => 'libhours.pages.inc'
  );
	
  $items['hours'] = array(
    'title' => t('Library Hours'),
    'page callback' => 'libhours_display',
    'access arguments' => array('access content'),
    'file' => 'libhours.pages.inc'
  );
	
/* API ENDPOINT */
	
  $items['hours/api'] = array(
    'title' => t('Process the API call'),
    'page callback' => 'libhours_api',
    'access arguments' => array('access content'),
    'file' => 'libhours.api.inc'
  );
	
/* This menu will be deprecated */

  $items['libraryhours/api'] = array(
    'title' => t('Process the API call'),
    'page callback' => 'libhours_api',
    'access arguments' => array('access content'),
    'file' => 'libhours.api.inc'
  );

	
/* ADMIN PATHS */
	
  $items['admin/content/libhours'] = array(
    'title' => t('Libraries Hours'),
    'description' => t('Administer libraries hours'),
    'page callback' => 'libhours_admin',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc'
  );
	
  $items['admin/content/libhours/location/add'] = array(
    'title' => t('Add Location'),
    'page callback' => 'libhours_admin_location_edit',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc'
  );
	
  $items['admin/content/libhours/location/edit'] = array(
    'title' => t('Edit location'),
    'page callback' => 'libhours_admin_location_edit',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );
	
  $items['admin/content/libhours/location/delete'] = array(
    'title' => t('Delete location'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('libhours_admin_location_delete_confirm'),
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );
	
  $items['admin/content/libhours/location/hours'] = array(
    'title' => t('Location Information'),
    'page callback' => 'libhours_admin_location_hours',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );
	
  $items['admin/content/libhours/period/add'] = array(
    'title' => t('Add period'),
    'page callback' => 'libhours_admin_period_edit',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK 
  );
	
  $items['admin/content/libhours/period/edit'] = array(
    'title' => t('Edit period'),
    'page callback' => 'libhours_admin_period_edit',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );
	
  $items['admin/content/libhours/period/delete'] = array(
    'title' => t('Delete Period'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('libhours_admin_period_delete_confirm'),
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );
	
  $items['admin/content/libhours/period/hours'] = array(
    'title' => t('Period Hours'),
    'page callback' => 'libhours_admin_period_hours',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );
	
  $items['admin/content/libhours/hours/edit'] = array(
    'title' => t('Edit Hours'),
    'page callback' => 'libhours_admin_hours_edit',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
	
  );
	
  $items['admin/content/libhours/hours/delete'] = array(
    'title' => t('Delete Hours'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('libhours_admin_hours_delete_confirm'),
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );
	
  $items['admin/content/libhours/exceptions/add'] = array(
    'title' => t('Add Exception'),
    'page callback' => 'libhours_admin_exceptions_edit',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );
	
  $items['admin/content/libhours/exceptions/edit'] = array(
    'title' => t('Edit Exception'),
    'page callback' => 'libhours_admin_exceptions_edit',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );
	
  $items['admin/content/libhours/exceptions/delete'] = array(
    'title' => t('Delete Exception'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('libhours_admin_exceptions_delete_confirm'),
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );

  $items['admin/content/libhours/semester/add'] = array(
    'title' => t('Add Semester'),
    'page callback' => 'libhours_admin_semester_edit',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );
  $items['admin/content/libhours/semester/edit'] = array(
    'title' => t('Edit Semester'),
    'page callback' => 'libhours_admin_semester_edit',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );

  $items['admin/content/libhours/semester/delete'] = array(
    'title' => t('Delete Semester'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('libhours_admin_semester_delete_confirm'),
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );
  
  $items['admin/content/libhours/exception_type/add'] = array(
    'title' => t('Add New Exception Type'),
    'page callback' => 'libhours_admin_exception_type_edit',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );
  $items['admin/content/libhours/exception_type/edit'] = array(
    'title' => t('Edit Exception Type'),
    'page callback' => 'libhours_admin_exception_type_edit',
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );

  $items['admin/content/libhours/exception_type/delete'] = array(
    'title' => t('Delete Exception Type'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('libhours_admin_exception_type_delete_confirm'),
    'access arguments' => array('administer library hours'),
    'file' => 'libhours.admin.inc',
    'type' => MENU_CALLBACK
  );
  return $items;
}

function libhours_block_info()  {
  $block = array();
  $i = 1;
  //$row = db_query("SELECT lid, name FROM {libhours_locations} ORDER BY lid ASC");

// db_select query...
  $row = db_select('libhours_locations', 'l')
  ->fields('l')
  ->orderBy('lid', 'ASC')
  ->execute()
  ->fetchAssoc();
  foreach($row as $record)  {
    $block[$i]['info'] = t("Library Hours @location",array('@location' => $record['name']));
    variable_set('libraryhours_block_'.$i,$record['lid']);
    //i++;
  }
  return $block;
}

/*
 * Implement hook_block_view()
*/

function libhours_block_view($delta = 0)  {
  $now = getdate();
			
  $block['subject'] = t($now[weekday].', '.$now[month].' '.$now[mday].', '.$now[year]);
  $today = time();
  $dow   = date('w', $today);
			
  $rs    = db_query("SELECT e.*, l.name FROM {libhours_exceptions} e INNER JOIN {libhours_locations} l ON l.lid=e.lid WHERE :today >= from_date AND :today <= to_date AND e.lid=:delta LIMIT 1", array(':today' => $today, ':delta' => $delta));

  if(count($rs) > 0)  {
    $hours = $rs->fetchObject();
  }
  else  {
    $rs = db_query("SELECT h.*, l.name FROM {libhours_hours} h 
      INNER JOIN {libhours_periods} p ON p.pid=h.pid
      INNER JOIN {libhours_locations} l ON l.lid=p.lid 
      WHERE p.lid=:delta AND :today >= p.from_date AND :today <= p.to_date  AND SUBSTRING(h.dow, :dow, 1) = '1' ORDER BY from_date DESC LIMIT 1", array(':delta' => $delta, ':today' => $today,'dow' => ($dow+1)));
    if(count($rs) > 0)  {
    $hours = $rs->fetchObject();
  }
    else  {
      $hours = false;
    }
  }
			
  if ($hours === false)  {
    $block['content'] = 'unknown '; 
  }
  else  {
    $next = null;
    $prev = null;
    if ($hours->close == 2359)  {
      $prev = array('open' => null, 'close' => null);
      $next = array('open' => 0, 'close' => 2359);
    }
    elseif ($hours->open == 0)  {
      $prev = array('open' => 0, 'close' => 2359);
      $next = array('open' => null, 'close' => null);
    }
    $block['content'] = _libhours_displayTodaysHours($hours->open, $hours->close, $prev, $next). '<div id="allhours"><a href="'.base_path().'hours">all library hours</a></div>';

  }
  return $block;
}

/**
 * Implements hook_element_info()
 */
function libhours_element_info()  {
  return array(
    'time' => array(
    '#input' => true,
    '#process' => array('expand_time'),
      '#element_validate' => array('time_validate')
    )
  );
}

/**
 * process the time element
 */
function expand_time($element)  {
  $hours = array();
  for ($i=1;$i<=12;$i++)  {
    $hours[$i] = $i;
  }
  $minutes = array();
  for ($i=0;$i<60;$i+=5)  {
    $value = str_pad($i, 2, 0, STR_PAD_LEFT);
    $minutes[$value] = $value;
  }
  $minutes[59] = 59; // need to add in 59 just to specify a closed time of 11:59 pm
	
  if (empty($element['#value']))  {
    $element['#value'] = array('hour' => '-', 'minute' => '-', 'm' => 'am');
  }
	
  $element['#tree'] = true;
	
  $parents = $element['#parents'];
  $parents[] = 'hour';
  $element['hour'] = array(
    '#type' => 'select',
    '#default_value' => $element['#value']['hour'],
    '#options' => $hours,
    '#suffix' => ':'
  );
	
  $parents = $element['#parents'];
  $parents[] = 'minute';
  $element['minute'] = array(
    '#type' => 'select',
    '#default_value' => $element['#value']['minute'],
    '#options' => $minutes
  );
	
  $parents = $element['#parents'];
  $parents[] = 'm';
  $element['m'] = array(
    '#type' => 'select',
    '#default_value' => $element['#value']['m'],
    '#options' => array('am' => 'am', 'pm' => 'pm')
  );
	
  return $element;
}

/**
 * validates time element
 */
function time_validate($element)  {
  if (trim($element['#value']['hour']) == '-' || trim($element['#value']['minute']) == '-')  {
    form_error($element, t('Please select a correct hour and minute.'));
  }
}

/**                                                  
 * Implements theme_hook()
*/ 
function theme_time($element){
	//return theme('form_element', $element, '<div class="container-inline">' . $element['#children'] . '</div>');
	return theme('form_element', array('element' => $element,'div' => '<div class="container-inline">' . $element['#children'] . '</div>'));
}



/**
 * Preprocess for the hours_display theme
 *
 * @see libhours-display.tpl.php
 */
function template_preprocess_hours_display(&$variables)  {
	
  if (!$variables['lid']) 
    $variables['lid'] = 1;
  $lid = $variables['lid'];
	
  $today = time();

  if (!$variables['pid'])  {
    $variables['pid'] = db_query("SELECT pid FROM {libhours_periods} WHERE :today >= from_date AND :today <= to_date AND lid=:lid ORDER BY from_date DESC LIMIT 1", array(':today' =>$today, ':lid' => $lid));
    if (empty($variables['pid']))  {
      $variables['pid'] = db_query("SELECT pid FROM {libhours_periods} WHERE from_date >= :today AND lid=:lid ORDER BY from_date ASC LIMIT 1", array(':today' => $today, ':lid' => $lid));
    }
  }

  $pid = $variables['pid'];
  // using db_select
  $location = db_select('libhours_locations', 'l')
    ->fields('l')
    ->condition('lid', $lid, '=')
    ->execute()
    ->fetchObject();

  $variables['description'] = $location->description;
	
  // load up the available locations
  $variables['locations'] = array();
  // using db_select
  $lrs = db_select('libhours_locations', 'l')
    ->fields('l')
    ->condition('parent', 0, '=')
    ->orderBy('name', 'ASC')
    ->execute()
    ->fetchObject();

  foreach($lrs as $record)  {
    $children = array();
    $crs = db_select('libhours_location', 'l')
    ->fields('l')
    ->condition('parent', $row->lid, '=')
    ->orderBy('name', 'ASC')
    ->execute()
    ->fetchOblect();
    
    foreach($crs as $record)  {
      $children[] = array('lid' => $child->lid, 'name' => $child->name);
    }
    $variables['locations'][] = array('lid' => $row->lid, 'name' => $row->name, 'children' => $children);
  }
	
  // load the next 4 periods
  $variables['periods'] = array();
  $rs = db_query("SELECT *, s.name FROM {libhours_periods} p 
	INNER JOIN {libhours_semesters} s ON p.sid = s.sid
	WHERE lid = :lid AND :today <= to_date ORDER BY from_date ASC LIMIT 4", array(':lid' => $lid, ':today' => $today));

  foreach($rs as $records)  {
    $hours = array();
    $rh = db_query("SELECT * FROM {libhours_hours} WHERE pid=:pid ORDER BY dow DESC", array(':pid' => $period->pid));
    foreach($rh as $record)  {
      for ($i=0;$i<strlen($hour->dow);$i++)  {
        if ($hour->dow[$i] == '1')  {
	  $hours[$i] = array('open' => $hour->open, 'close' => $hour->close);
	}
      }
    }
  for ($i=0;$i<count($hours);$i++)  {
    $previdx = ($i == 0)?(count($hours) - 1):($i - 1);
    $nextidx = (($i + 1) == count($hours))?0:($i + 1);
			
    $display_hours[$i] = _libhours_displayhours($hours[$i]['open'], $hours[$i]['close'], $hours[$previdx], $hours[$nextidx]);
  }
		
  // load the exceptions within the period
  $vexceptions = array();
  $ers = db_query("SELECT * FROM {libhours_exceptions} WHERE lid=:lid AND from_date >= :period1 AND to_date <= :period2 AND :today <= to_date ORDER BY from_date ASC", array(':lid' =>$lid, ':period1' => $period->from_date, ':period2' => $period->to_date, ':today' => $today));
  $exceptions = array();
 
  foreach($ers as $record)  {
    if (date("n/d/Y", $exception->from_date) == date("n/d/Y", $exception->to_date))  {
      $date = date("l: M j", $exception->from_date);
    }
    else  {
      $date = date("M j", $exception->from_date) . ' - ' . date("M j", $exception->to_date);
    }
			
    $exceptions[strtoupper($exception->label)][] = $date . ', ' . _libhours_displayhours($exception->open, $exception->close);
  }
  // load all the sorted exceptions for displaying  
  foreach ($exceptions as $label => $times)  {
    $vexceptions[] = array('name' => $label, 'times' => $times);
  }
			
  $variables['periods'][] = array('pid' => $period->pid, 'name' => $period->name, 'from_date' => $period->from_date, 'to_date' => $period->to_date, 'hours' => $display_hours, 'exceptions' => $vexceptions);
  }	
}

/**
 * returns day of week
 *
 * @param $index the week day numeric representation 0 for Sunday through 6 for Saturday
 * @param $long true to return full text, false to return three letter representation of a day. (default false)
 */
function _libhours_dow($index, $long = true)  {
  $_DOW[0] = 'Sunday';
  $_DOW[1] = 'Monday';
  $_DOW[2] = 'Tuesday';
  $_DOW[3] = 'Wednesday';
  $_DOW[4] = 'Thursday';
  $_DOW[5] = 'Friday';
  $_DOW[6] = 'Saturday';
	
  return (($long)?$_DOW[$index]:substr($_DOW[$index], 0, 3));
}

/**
 * parse time given in integer to a string format g:ia
 *
 * @param $time time given as integer 0 - 2400
 */
function _libhours_parsetime($time)  {
  if ($time < 100)  {
    $hour = 0;
  }
  else  {
    $hour = substr($time, 0, -2);
  }
  $minute = substr($time, -2);
	
  return date('g:ia', mktime($hour, $minute, 0));
}

/**
 * splits time into an array. used for form select boxes
 *
 * @param $time time given in the format of g:ia
 */
function _libhours_splittime($time)  {
  $meridiem = substr($time, -2); 
  $time     = substr($time, 0, -2);
  $hm       = explode(':', $time);
	
  return array($hm[0], $hm[1], $meridiem);
}

/**
 * Converts day of week binary to day of week string
 *
 * @param $dow Day of week binary
 */
function _libhours_dowstring($dow)  {
  $str = '';
  for ($i=0;$i<strlen($dow);$i++)  {
    if ($dow[$i] == '1')
      $str .= _libhours_dow($i, false) . ' - ';
  }
  $str = substr($str, 0, -3);

  return $str;
}

/**
 * displays the open/close hours
 *
 * @param $open The time, as int, the location opens
 * @param $close The time, as int, the location closes
 * @param $prev Array of the hours from the previous day
 * @param $next Array of the hours for the next day
 */
function _libhours_displayhours($open, $close, $prev = null, $next = null)  {
  $openstr  = _libhours_parsetime($open);
  $closestr = _libhours_parsetime($close);
	
  if ($open == 0 && $close == 2359)  {
    $r = 'Open 24 hours';
  }
  elseif ($open == 0 && $close == 0)  {
    $r = 'Closed';
  }
  else  {
    $r = $openstr . ' - '. $closestr;
    if ($prev && $next)  {
      if ($next['open'] == 0 && $next['close'] == 2359)  {
        $r = $openstr . ' - Open';
      }
      elseif ($prev['open'] == 0 && $prev['close'] == 2359)  {
        $r = 'Open - ' . $closestr;
      }
    }
  }
	
  return $r;
}
 
function _libhours_displayTodaysHours($open, $close, $prev = null, $next = null)  {
  $openstr  = _libhours_parsetime($open); 
  $closestr = _libhours_parsetime($close);
	
  if ($open == 0 && $close == 2359)  {
    $r = 'Open 24 hours';
  }
  elseif ($open == 0 && $close == 0)  {
    $r = 'Closed';
  }
  else  {
    // now see if we're now open
    $format = 'g:ia';
    $openDate  = DateTime::createFromFormat($format, $openstr);
    $closeDate = DateTime::createFromFormat($format, $closestr);
    $now = new datetime();
    if ($now < $openDate) {
      $r = 'Opens at '. $openstr;
    } 
    elseif ($now < $closeDate) {
      $r = 'Closes at '. $closestr;
    } 
    else
      $r = 'Now Closed';
  }
	
  return $r;
}
 
 
 
